CHAPTER 1 : Retrieving Data Using the SQL SELECT Statement

1. DISPLAY ALL DATA OF DEPARTMENTS TABLE.
ans->select * from departments;

2. DISPLAY LAST_NAME AND SALARY COLUMNS OF EMPLOYEES TABLE.
ans-> select last_name,salary from employees;

3. DISPLAY CURRENT SALARY AND NEW SALARY AFTER INCREMENTING IT WITH RS.5000 WITH PROPER COLUMN HEADINGS.
ans-> select salary,salary+5000 new_salary from employees;

4. DISPLAY FIRST_NAME , ANNUAL SALARY AND NEW ANNUAL SALARY AFTER INCREMENTING IT WITH RS.2000.
ans-> select first_name,salary*12 Annual_salary,(salary+2000)*12 New_annual_salary from employees;

5. DISPLAY LAST_NAME AND FIRST_NAME IN SINGLE COLUMN WITH A SPACE IN BETWEEN WITH PROPER COLUMN HEADING.
ans-> select first_name||' '||last_name from employees;

6. DISPLAY NON-DUPLICATE DEPARTMENT_ID FROM EMPLOYEES TABLE.
ans-> select  DISTINCT/UNIQUE department_id from DEPARTMENTS;

7. DISPLAY ALL NON-DUPLICATE COMBINATIONS OF MANAGER_ID AND JOB_ID. (DON'T USE DISTINCT)
ans->select unique manager_id,job_id from employees;

8. DISPLAY ROWID AND ALL COLUMNS OF REGIONS TABLE. (USING META CHARACTER AND TABLE ALIAS)
ans->select rowid,region_id,region_name  from regions;

9. DISPLAY SAMPLED RESULT FOR EACH ROW. SAMPLE-> King works as AD_PRES.
ans->select last_name||' works_as '||job_id from employees;

10. DISPLAY SAMPLED RESULT FOR EACH ROW. SAMPLE-> Steven's monthly salary is Rs.24000/-.(with and without quote operator)
ans->SELECT First_NAME || '''s monthly salary is Rs.' || SALARY FROM EMPLOYEES;

11. DISPLAY FIRST_NAME , SALARY , COMMISSION_PCT AND COMMISSION AMOUNT WITH PROPER COLUMN HEADING.
ans-> SELECT FIRST_NAME , SALARY , COMMISSION_PCT, COMMISSION_PCT * SALARY "COMMISSION AMOUNT" FROM EMPLOYEES;

CHAPTER 2 : Restricting and Sorting Data

1. DISPLAY ALL ROWS OF DEPARTMENTS TABLE IN ASCENDING ORDER OF DEPARTMENT_NAME.
ans->select * from departments order by 1,2,3,4;

2. DISPLAY DEPARTMENT_NAME (ALIAS DNM) AND LOCATION_ID FROM DEPARTMENTS TABLE IN DESCENDING ORDER OF FIRST COLUMN. (DON'T USE COLUMN ALIAS OR COLUMN NAME IN ORDER BY CLAUSE)
ans-> select department_name,location_id from departments order by 1 desc;

3. DISPLAY DEPARTMENT_NAME (ALIAS DNM) AND LOCATION_ID FROM DEPARTMENTS TABLE IN ASCENDING ORDER OF DEPARTMENT_NAME USING COLUMN ALIAS. MAKE COMMAND COMPLETELY READABLE.
ans->select department_name||' '||location_id departments from departments order by 1;

4. DISPLAY DEPARTMENT_ID , JOB_ID , SALARY AND FIRST_NAME. SORT RESULT USING ALL COLUMNS. USE ALL 3 STYLES    COLUMN NAME , COLUMN NUMBER AND COLUMN ALIAS. USE BOTH ASC AND DESC. USE NULLS LAST.
ans->select department_id,job_id,salary,first_name from employees order by 1 nulls last;

5. GIVE EXAMPLE OF & SUBSTITUTION VAIRABLE.
ans->select &cl from &tn;
Enter value for cl: *
Enter value for tn: employees

6. GIVE EXAMPLE OF && SUBSTITUTION VARIABLE.
ans-> select &cl from &&tn;
Enter value for cl: *
Enter value for tn: employees

7. USE DEFINE AND DECLARE A VARIABLE NAMED CL. ASSIGN LAST_NAME , HIRE_DATE , SALARY TO IT. USE IT IN COMMAND.
ans-> define &cl= last_name,hire_date,salary
Enter value for cl: it
output:- select &it from employees;
old   1: select &it from employees
new   1: select last_name,hire_date,salary from employees

8. USE DEFINE AND DECLARE A VARIABLE NAMED HRA. (DON'T USE ANY QUOTATION) ASSIGN SALARY * 12 / 15 * .33. USE IT IN COMMAND. RESULT MUST HAVE PROPER COLUMN HEADING.
ans->

9. DISPLAY ALL ROWS OF EMPLOYEES TABLE WHO GETS 11000 OR MORE SALARY.
ans-> select * from employees  where salary >='11000';

10. DISPLAY ALL ROWS OF EMPLOYEES TABLE WHO WORKS AS ANY OF AD_VP, IT_PROG OR SA_REP. (DON'T USE IN)
ans-> select * from employees where job_id =any ('AD_VP','IT_PROG','SA_REP');

11. DISPLAY ALL ROWS OF EMPLOYEES TABLE WHO WORKS OTHER THAN ANY OF AD_VP, IT_PROG OR SA_REP. (DON'T USE IN AS WELL AS LOGICAL OPERATORS)
ans-> select * from employees where job_id <> all('AD_VP','IT_PROG','SA_REP');

12. DISPLAY ALL ROWS OF EMPLOYEES TABLE WHO WORKS AS ANY OF AD_VP, IT_PROG OR SA_REP. (USING IN)
ans-> select * from employees where job_id in ('AD_VP','IT_PROG','SA_REP');

13. DISPLAY ALL ROWS OF EMPLOYEES TABLE WHO WORKS OTHER THAN ANY OF AD_VP, IT_PROG OR SA_REP. (USING IN)
ans->select * from employees where job_id not in ('AD_VP','IT_PROG','SA_REP');

14. DISPLAY ALL ROWS OF EMPLOYEES TABLE WHO IS HIRED IN YEAR 99. (USING LOGICAL OPERATOR)
ans->select * from employees where hire_date >= '01-JAN-99' AND HIRE_DATE <= '31-DEC-99';

15. DISPLAY ALL ROWS OF EMPLOYEES TABLE WHO IS HIRED IN YEAR 99. (USING BETWEEN)
ans->select * from employees where hire_date  between '01/jan/99' and  '31/dec/99';

16. DISPLAY ALL ROWS OF EMPLOYEES TABLE WHO IS HIRED IN YEAR 99. (USING LIKE)
ans->select * from employees where hire_date like '%99';

17. DISPLAY ALL ROWS OF EMPLOYEES TABLE WHO GETS COMMISSION. (ATLEAST 5 STYLES)
ans-> 1. select * from employees where  COMMISSION_PCT > 0;
      2. select * from employees where  COMMISSION_PCT <> 0;
      3. select * from employees where   COMMISSION_PCT BETWEEN .15 AND .3;
      4. select * from employees where   COMMISSION_PCT IN (.15,.2,.3);
      5. select * from employees where COMMISSION_PCT = ANY (.15,.2,.3);

18. DISPLAY ALL STUDENTS WHO IS PASS IN ENGLISH SUBJECT. (TABLE NAME EXAM) PASSING MARKS 33
ans->select rno, english from exam where english >=33;

19. DISPLAY ALL STUDENTS WHO IS FAIL IN MATHS SUBJECT.
ans-> select rno, maths from exam where maths <=33;

20. DISPLAY ALL STUDENTS WHOSE RESULT IS PASS.
ans->select * from exam where maths >=33 and english>=33;

21. DISPLAY ALL STUDENTS WHOSE RESULT IS FAIL.
ans->select * from exam where maths <=33 and english <=33;

22. DISPLAY ALL STUDENTS WHO IS PASS IN ENGLISH AND FAIL IN MATHS.
ans->select * from exam where maths <=33 and english >=33;

23. DISPLAY ALL STUDENTS WHO IS FAIL IN BOTH SUBJECTS.
ans-> select * from exam where maths <=33 and english <=33;

24. DISPLAY ALL EMPLOYEES OF DEPARTMENT_ID 50 WITH JOB_ID ST_CLERK AND DEPARTMENT_ID 80 WITH JOB_ID SA_REP.
ans->SELECT DEPARTMENT_ID , JOB_ID , FIRST_NAME FROM EMPLOYEES WHERE (DEPARTMENT_ID,JOB_ID) IN ((50,'ST_CLERK'),(80,'SA_REP'));

25. DISPLAY ALL FIRST_NAME WHOSE LENGTH IS UPTO 6 CHARACTERS. 
ans-> SELECT FIRST_NAME FROM EMPLOYEES WHERE FIRST_NAME LIKE '______';

26. DISPLAY LAST_NAME AND HIRE_DATE OF THOSE WHO WERE HIRED EITHER IN JANUARY OR JUNE MONTH.
ans->

27. STATEMENT TRUE OR FALSE : SELECT 'SHRI' || 210 * 2 FROM DUAL;
ans-> TRUE

28. WHAT WILL BE THE OUTPUT : SELECT 5 || 6 + 5 FROM DUAL;
ANS-> 61